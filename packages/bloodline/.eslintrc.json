{
    "env": {
        "browser": true,
        "es2022": true
    },
    "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/eslint-recommended"
    ],
    "ignorePatterns": [
        "package.json",
        "node_modules",
        "dist",
        "webpack.config.mjs"
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "sourceType": "module"
    },
    "plugins": [
        "@typescript-eslint"
    ],
    "settings": {
        "import/parsers": {
            "@typescript-eslint/parser": [
                ".ts",
                ".mts"
            ]
        },
        "import/resolver": {
            "eslint-import-resolver-typescript": true
        }
    },
    "rules": {
        "@typescript-eslint/adjacent-overload-signatures": "error",
        "@typescript-eslint/ban-ts-ignore": [
            "off"
        ],
        "@typescript-eslint/ban-types": [
            "error"
        ],
        "camelcase": [
            "off"
        ],
        "consistent-return": [
            "error",
            {
                "treatUndefinedAsUnspecified": true
            }
        ],
        // buggy: https://github.com/typescript-eslint/typescript-eslint/issues/2077
        "@typescript-eslint/camelcase": "off",
        // buggy: https://github.com/typescript-eslint/typescript-eslint/issues/2077
        "@typescript-eslint/class-name-casing": "off",
        // buggy: https://github.com/typescript-eslint/typescript-eslint/issues/2077
        "@typescript-eslint/interface-name-prefix": "off",
        "@typescript-eslint/naming-convention": [
            "error",
            {
                "selector": "accessor",
                "format": [
                    "camelCase",
                    "PascalCase"
                ]
            },
            {
                "selector": "variable",
                "format": [
                    "camelCase",
                    "PascalCase"
                ]
            },
            {
                "selector": "parameterProperty",
                "format": [
                    "camelCase",
                    "PascalCase"
                ]
            },
            {
                "selector": "function",
                "format": [
                    "camelCase",
                    "PascalCase"
                ]
            },
            {
                "selector": "parameter",
                "format": [
                    "camelCase",
                    "PascalCase"
                ],
                "leadingUnderscore": "allow"
            },
            {
                "selector": "classProperty",
                "modifiers": [
                    "private",
                    "protected"
                ],
                "format": [
                    "camelCase",
                    "PascalCase"
                ],
                "leadingUnderscore": "require"
            },
            {
                "selector": "method",
                "modifiers": [
                    "private",
                    "protected"
                ],
                "format": [
                    "camelCase"
                ],
                "leadingUnderscore": "require"
            },
            {
                "selector": "typeParameter",
                "format": [
                    "PascalCase"
                ]
            },
            {
                "selector": "interface",
                "format": [
                    "PascalCase"
                ],
                "custom": {
                    "regex": "^I[A-Z]",
                    "match": false
                }
            },
            // Ignore properties that require quotes
            {
                "selector": [
                    "classProperty",
                    "objectLiteralProperty",
                    "typeProperty",
                    "classMethod",
                    "objectLiteralMethod",
                    "typeMethod",
                    "accessor",
                    "enumMember"
                ],
                "format": null,
                "modifiers": [
                    "requiresQuotes"
                ]
            }
        ],
        "@typescript-eslint/consistent-type-assertions": "error",
        "@typescript-eslint/member-delimiter-style": "error",
        "no-array-constructor": [
            "off"
        ],
        "@typescript-eslint/no-array-constructor": [
            "error"
        ],
        "no-empty-function": [
            "off"
        ],
        "@typescript-eslint/no-empty-interface": "off",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-inferrable-types": "error",
        "@typescript-eslint/no-misused-new": [
            "error"
        ],
        "@typescript-eslint/no-namespace": [
            "error"
        ],
        "@typescript-eslint/no-non-null-assertion": [
            "off"
        ],
        "@typescript-eslint/no-this-alias": [
            "error"
        ],
        "no-unused-vars": [
            "off"
        ],
        "no-use-before-define": [
            "off"
        ],
        "require-jsdoc": [
            "error",
            {
                "require": {
                    "FunctionDeclaration": true,
                    "MethodDefinition": false,
                    "ClassDeclaration": false,
                    "ArrowFunctionExpression": false,
                    "FunctionExpression": false
                }
            }
        ],
        "@typescript-eslint/array-type": "error",
        "@typescript-eslint/consistent-type-definitions": "error",
        "@typescript-eslint/explicit-member-accessibility": [
            "error",
            {
                "accessibility": "no-public"
            }
        ],
        // buggy: https://github.com/typescript-eslint/typescript-eslint/issues/2409
        "@typescript-eslint/member-ordering": "off",
        "@typescript-eslint/no-param-reassign": "off",
        "@typescript-eslint/prefer-for-of": "error",
        "@typescript-eslint/prefer-function-type": "error",
        "@typescript-eslint/prefer-namespace-keyword": "error",
        "@typescript-eslint/quotes": [
            "error",
            "single"
        ],
        "@typescript-eslint/semi": [
            "error",
            "always"
        ],
        "@typescript-eslint/triple-slash-reference": "error",
        "@typescript-eslint/type-annotation-spacing": "error",
        "@typescript-eslint/unified-signatures": "error",
        "arrow-body-style": "error",
        "arrow-parens": [
            "error",
            "as-needed"
        ],
        "comma-dangle": "off",
        "complexity": [
            "error",
            {
                "max": 10
            }
        ],
        "curly": [
            "error",
            "multi",
            "consistent"
        ],
        "default-case": "error",
        // No need to suffer such a unix hack.
        "eol-last": [
            "error",
            "never"
        ],
        // must match .editorconfig
        "linebreak-style": [
            "error",
            "unix"
        ],
        "max-len": [
            "error",
            {
                "code": 200
            }
        ],
        "new-parens": "error",
        "newline-per-chained-call": "off",
        "no-bitwise": "off",
        "no-console": "error",
        "no-multiple-empty-lines": "error",
        "no-trailing-spaces": "error",
        "no-undef-init": "error",
        "no-unused-expressions": "error",
        "object-shorthand": "error",
        "one-var": [
            "error",
            "consecutive"
        ],
        "padding-line-between-statements": [
            "error",
            {
                "blankLine": "always",
                "prev": "*",
                "next": "return"
            }
        ],
        "prefer-object-spread": "error",
        "prefer-template": "error",
        "quote-props": [
            "error",
            "consistent-as-needed"
        ],
        "space-before-function-paren": "off",
        "valid-jsdoc": [
            "error",
            {
                "requireParamType": false,
                "requireReturnType": false
            }
        ],
        "yoda": "off"
    }
}